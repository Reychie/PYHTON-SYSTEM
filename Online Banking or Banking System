def insertion_sort(elements,key):
    for i in range(1,len(elements)):
        unsorted_elements = elements[i]
        j = i - 1

        while j >=0 and unsorted_elements[key] < elements[j][key]:
            elements[j+1] = elements[j]
            j -= 1
            elements[j+1] = unsorted_elements


def dsgn():
    print("---------------------------------------------------------------------------")
def statement(words):
    print(f"-----------------------------{words}--------------------------------------")



username = ["superaccount"]
password = ["superpassword"]
banknumber = [2022304868]

balance,balance2 = 0,0
deposit_history,deposit_history2 = [],[]
withdraw_history,withdraw_history2 = [],[]


import random
import datetime

time = datetime.datetime.now()

def create_account():
    global username
    dsgn()
    print("                         Online Banking                                ")
    print("                        Creating Account                               ")
    dsgn()

    user_name = input("Create Username:")
    finding = user_name in username
    if finding == True:
        print("Username is already taken")
        create_account()
    else:
        pass_word = input("Create Password:")
        bank_numbers = random.randrange(1000000000, 9999999999, 3)
        return username.append(user_name), password.append(pass_word),banknumber.append(bank_numbers)

def log_in ():
    global input_user
    statement("Log In")
    input_user = str(input("Input Username:"))
    input_pass = str(input("Input Password:"))
    for i in range(len(username)):
        if input_user == username[i] and input_pass == password[i]:
            dsgn()
            print(f"Welcome:{input_user}\nbank num:{banknumber[i]}")
            main_menu()
            break
        elif input_user != username[i] and input_pass != password[i] or input_user == username[i] and input_pass != password[i] or input_user != username[i] and input_pass == password[i]:
            if input_user == username[i + 1] and input_pass == password[i + 1]:
                dsgn()
                print(f"Welcome:{input_user}\nbank num:{banknumber[i + 1]}")
                main_menu()
            else:
                print("Invalid Username or Password")
                log_in()



def preprocess():
    while True:
        statement("Online Banking")
        choice = input("What would you like to do:\n [A] Login\n [B] Create Account\n [C] Exit\n Choice: ")
        if choice.upper() == "A":
            log_in()
            break
        elif choice.upper() == "B":
            create_account()
        elif choice.upper() == "C":
            print("Thank you for accessing online banking")
            exit()
            break

def user_balance():
    global balance,balance2,username,input_user
    statement("BALANCE")
    for i in range(len(username)):
        if input_user == username[i]:
            print(f"Your Balance is:P{balance}")

        elif input_user == username[i+1]:
            print(f"Your Balance is:P{balance2}")
        back_function()


def deposit():
    global balance,balance2,deposit_history,deposit_history2,username,input_user
    dsgn()
    statement("Deposit")
    for i in range(len(username)):
        if input_user == username[i]:
            while True:
                try:
                    money = int(input("Input Amount:"))
                    balance += money
                    print(
                        f"Deposit Receipt History \n You deposited P{money} into your account\n Your new balance is P{balance}")
                    item = {"deposit": money, "time": time}
                    deposit_history.append(item)
                    break
                except:
                    print("Invalid Input")

        elif input_user == username[i+1]:
            while True:
                try:
                    money2 = int(input("Input Amount:"))
                    balance2 += money2
                    print(
                        f"Deposit Receipt History \n You deposited P{money2} into your account\n Your new balance is P{balance2}")
                    item2 = {"deposit": money2, "time": time}
                    deposit_history2.append(item2)
                    break
                except:
                    print("Invalid Input")

        back_function()

def back_function():
    dsgn()
    while True:
        decision = str(input("What would you like to do:\n [A] Back\n Choice:"))
        if decision.upper() == "A":
            main_menu()
        else:
            print("INVALID INPUT")

def withdraw():
    global balance,balance2,withdraw_history,withdraw_history2,username,input_user
    dsgn()
    statement("Withdraw")
    for i in range(len(username)):
        if input_user == username[i]:
            while True:
                try:
                    money = int(input("Input Amount:"))
                    if money > balance:
                        print("Overdraft")
                        withdraw()

                    else:
                        balance -= money
                        print(
                            f"Withdraw Receipt History \n You Withdraw P{money}  on your account\n Your new balance is P{balance}")
                        item = {"withdraw": money, "time": time}
                        withdraw_history.append(item)
                    dsgn()
                    break
                except:
                    print("Invalid Input")
        elif input_user == username[i+1]:
            while True:
                try:
                    money2 = int(input("Input Amount:"))
                    if money2 > balance2:
                        print("Overdraft")
                        withdraw()
                    else:
                        balance2 -= money2
                        print(
                            f"Withdraw Receipt History \n You Withdraw P{money2} on your account\n Your new balance is P{balance2}")
                        item2 = {"withdraw": money2, "time": time}
                        withdraw_history2.append(item2)
                    dsgn()
                    break
                except:
                    print("Invalid Input")
        back_function()


def user_deposit_history():
    global deposit_history,deposit_history2,username,input_user
    insertion_sort(deposit_history,key="deposit")
    insertion_sort(deposit_history2,key="deposit")

    statement("Deposit History")
    print(input_user)
    for i in range(len(username)):
        if input_user == username[i]:
            for x in range(len(deposit_history)):
                print("Deposit:P", deposit_history[x]["deposit"], "Time:", deposit_history[x]["time"])

        elif input_user == username[i + 1]:
            for z in range(len(deposit_history2)):
                print("Deposit:P", deposit_history2[z]["deposit"], "Time:", deposit_history2[z]["time"])

        back_function()

def user_withdraw_history():
    global withdraw_history,withdraw_history2,username,input_user
    insertion_sort(withdraw_history,key="withdraw")
    insertion_sort(withdraw_history2,key="withdraw")

    statement("Withdraw History")
    for i in range(len(username)):
        if input_user == username[i]:
            for j in range(len(withdraw_history)):
                print("Withdraw:P", withdraw_history[j]["withdraw"], "Time:", withdraw_history[j]["time"])

        elif input_user == username[i+1]:
            for x in range(len(withdraw_history2)):
                print("Withdraw:P", withdraw_history2[x]["withdraw"], "Time:", withdraw_history2[x]["time"])

        back_function()


def history():
    statement("History")
    while True:
        decision = str(input("What would you like to do:\n [A] Deposit\n [B] Withdraw\n [C] Option\n Choice:"))
        if decision.upper() == "A":
            user_deposit_history()
        elif decision.upper() == "B":
            user_withdraw_history()
        elif decision.upper() == "C":
            back_function()
        else:
            print("INVALID INPUT")

def change_user():
    global username
    while True:
        dsgn()
        current_username = str(input("Enter your current username:"))
        finding = current_username in username
        if finding == True:
            user_index = username.index(current_username)
            dsgn()
            new_username = str(input("Enter your new username:"))
            username[user_index] = new_username
            break
        else:
            print("Invalid Input Username")

    back_function()
def change_pass():
    global password
    while True:
        dsgn()
        current_password = str(input("Enter your current password:"))
        finding = current_password in password
        if finding == True:
            pass_index = password.index(current_password)
            dsgn()
            new_password = str(input("Enter your new password:"))
            password[pass_index] = new_password
            break
        else:
            print("Invalid Input Password")

    back_function()


def settings():

    statement("Settings")

    while True:
        change = str(input(f" [A] Change Username\n [B] Change Password\n choice:"))

        if change.upper() == "A":
            change_user()
        elif change.upper() == "B":
            change_pass()
        else:
            print("Invalid Input")




def main_menu():

    statement("MAIN MENU")
    while True:
        menu = str(input(f" [A] Deposit\n [B] Withdrawal\n [C] Balance\n [D] History\n [E] Settings\n [F] Logout\n Choice:"))
        if menu.upper() == "A":
            deposit()
            break
        elif menu.upper() == "B":
            withdraw()
            break
        elif menu.upper() == "C":
            user_balance()
            break
        elif menu.upper() == "D":
            history()
            break
        elif menu.upper() == "E":
            settings()
            break
        elif menu.upper() == "F":
            preprocess()
        else:
            print("INVALID INPUT")

def all_processes():
    preprocess()
    main_menu()

all_processes()
